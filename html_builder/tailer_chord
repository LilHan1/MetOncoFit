
d3.select("#viz")
.append("svg:svg")
.attr("width", 5000)
.attr("height", 3000);

var svg = d3.select("svg"),
width = 800,
height = 800,
outerRadius = Math.min(width, height) * 0.5 - 40,
innerRadius = outerRadius - 50;

var formatValue = d3.formatPrefix(",.0", 1e3);

var chord = d3.chord()
.padAngle(0.05);

var arc = d3.arc()
.innerRadius(innerRadius)
.outerRadius(outerRadius);

var ribbon = d3.ribbon()
.radius(innerRadius);

var color = d3.scaleOrdinal()
.domain(d3.range(4))
.range(["#000000", "#FFDD89", "#957244", "#F26223"]);

function arc_color(val){
if(val == 0){
return "#a6d854";
} else if (val == 1){
return "#8da0cb";
} else if (val == 2){
return "#fc8d62";
} else if (val == 3){
return "#d9d9d9";
} else if (val == 4){
return "#969696";
} else if (val == 5){
return "#525252";
} else if (val == 6){
return "#9970ab";
} else if (val == 7){
return "#762a83";
} else if (val == 8){
return "#40004b";
} else if (val == 9){
return "#e08214";
} else if (val == 10){
return "#b35806";
} else if (val == 11){
return "#7f3b08";
}
else{
return "#ffffff";
}
}

var g = svg.append("g")
.attr("transform", "translate(800,600)")
.datum(chord(chord_matrix));

var group = g.append("g")
.attr("class", "groups")
.selectAll("g")
.data(function(chords) { return chords.groups; })
.enter().append("g");

group.append("path")
.style("fill", function(d) { return arc_color(d.index); })
.style("stroke", function(d) { return d3.rgb(arc_color(d.index)).darker(); })
.attr("d", arc);

group.append("text")
.each(function(d) { d.angle = ((d.startAngle + d.endAngle) / 2);}) //Slightly altered function to define the angle
.attr("dy", "0.45em")
.attr("class", "titles")
.attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
.attr("transform", function(d,i) {
var c = arc.centroid(d);
return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
+ "translate(" + (innerRadius + 55) + ")"
+ (d.angle > Math.PI ? "rotate(180)" : "")
})
.style("font-size", "28px")
.text(function(d,i) { return Names[i]; })
.call(wrap,400);

g.append("g")
.attr("class", "ribbons")
.selectAll("path")
.data(function(chords) { return chords; })
.enter().append("path")
.attr("d", ribbon)
.style("fill", function(d) { return arc_color(d.source.index); })
.style("stroke", function(d) { return d3.rgb(arc_color(d.source.index)).darker(); });


var chart = svg.append('g')
.attr('id','bars')
.selectAll('rect')
.data(feat_imp)
.enter()
.append('rect')
.filter(function(d) { return d.xval < 10 })
.attr('height',30)
.attr('width',function(d){ return d.yval*1500; })
.style("fill","#a6cee3")
.attr('x',800)
.attr('y',function(d){ return 1480+(d.xval*50); });

var chartext = svg.append('g')
.attr('id','bartext')
.selectAll('text')
.data(feat_imp)
.enter()
.append('text')
.filter(function(d) { return d.xval < 10 })
.text(function(d){return d.name;})
.attr('text-anchor','end')
.attr('x',790)
.style("font-size", "24px")
.attr('y',function(d){ return 1500+(d.xval*50); });


var squigrect = svg.append('g')
.attr('id','squigrect')
.selectAll('rect')
.data(feat_imp)
.enter()
.append('rect')
.filter(function(d) { return d.xval < 10 })
.style("fill",function(d){ if(d.correl > 0.75){return "#f1a340"} else if(d.correl < -0.75){return "#998ec3"} else{ return "#D3D3D3"}})
.attr('height',40)
.attr('width',30)
.attr('x',1275)
.attr('y',function(d){ return 1480+(d.xval*50); });

var squigtext = svg.append('g')
.attr('id','squigrect')
.selectAll('text')
.data(feat_imp)
.enter()
.append('text')
.filter(function(d) { return d.xval < 10 })
.text(function(d){ if(d.correl > 0.75){return "G";} else if(d.correl < -0.75){return "L";} else{ return "~";};})
.attr('text-anchor','end')
.attr('x',1300)
.style("font-size", "32px")
.attr('y',function(d){ return 1510+(d.xval*50); });


var row = svg.selectAll(".row")
.data(conf_matr)
.enter().append("g")
.attr("class", "row")
.attr("transform", function(d, i) { return "translate(175," + i*150 + ")"; });

var cell = row.selectAll(".cell")
.data(function(d) { return d; })
.enter().append("g")
.attr("class", "cell")
.attr("transform", function(d, i) { return "translate(" + i*150 + ", 2200)"; });

cell.append('rect')
.attr("width", 150)
.attr("height", 150)
.style("stroke-width", 0)
.style("fill", colorMap);

cell.append("text")
.attr("dy", "0.33em")
.attr("x", 75)
.attr("y", 75)
.attr("text-anchor", "middle")
.style("font-size", "28px")
.style("fill", function(d, i) { return d >= 1700.0/2 ? 'white' : 'black'; })
.text(function(d, i) { return parseFloat(d).toFixed(0); });

var labels = svg.append('g')
.attr('class', "labels");

var columnLabels = labels.selectAll(".column-label")
.data(labelsData)
.enter().append("g")
.attr("class", "column-label")
.attr("transform", function(d, i) { return "translate(" + (250+(parseInt(i)*150)) + ", 2160)"; });

columnLabels.append("text")
.attr("dy", ".22em")
.attr("text-anchor", "start")
.attr("transform", "rotate(-60)")
.style("font-size", "28px")
.text(function(d, i) { return d; });

var rowLabels = labels.selectAll(".row-label")
.data(labelsData)
.enter().append("g")
.attr("class", "row-label")
.attr("transform", function(d, i) { return "translate(150," + ((parseInt(i)*150) + parseInt(2275)) + ")"; });

rowLabels.append("text")
.attr("dy", ".32em")
.attr("text-anchor", "end")
.style("font-size", "28px")
.text(function(d, i) { return d; });

var precLabels = labels.selectAll(".prec-label")
.data(result_vars)
.enter().append("g")
.attr("class", "prec-label")
.attr("transform", function(d, i) { return "translate( 1200," + (2250+(parseInt(i)*100)) + ")"; });

precLabels.append("text")
.attr("dy", ".22em")
.attr("text-anchor", "end")
.style("font-size", "36px")
.text(function(d, i) { return d.naam +" : "+ parseFloat(d.value).toFixed(2); });

var width = 700,   // width of svg
height = 400,  // height of svg
padding = 100;

var vis = svg.append('g')
.attr('class', "axislabels");

var xScale = d3.scaleLinear()
.domain([0.0,0.3])    // values between for month of january
.range([800,1250]);   // map these sides of the chart, in this case 100 and 600



// define the x axis
var xAxis = d3.axisTop()
.ticks(5, "")
.scale(xScale);


// draw x axis with labels and move to the bottom of the chart area
vis.append("g")
.attr("class", "xaxis axis")  // two classes, one for css formatting, one for selection below
.attr("transform", "translate(0,1475)")
.style("font", "24px times")
.call(xAxis);

// now add titles to the axes

vis.append("text")
.attr("text-anchor", "middle")  // this makes it easy to centre the text as the transform is applied to the anchor
.attr("transform", "translate(1050,1420)")  // centre below axis
.style("font-size", "32px")
.text("Gini score of feature importance");

function wrap(text, width) {
text.each(function() {
var text = d3.select(this),
words = text.text().split(/\s+/).reverse(),
word,
line = [],
lineNumber = 0,
lineHeight = 0.3, // ems
y = text.attr("y"),
dy = parseFloat(text.attr("dy")),
tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
while (word = words.pop()) {
line.push(word);
tspan.text(line.join(" "));
if (tspan.node().getComputedTextLength() > width) {
line.pop();
tspan.text(line.join(" "));
line = [word];
tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
}
}
});
}

d3.select("#generate")
.on("click", writeDownloadLink);

function writeDownloadLink(){
var html = d3.select("svg")
.attr("title", "test2")
.attr("version", 1.1)
.attr("xmlns", "http://www.w3.org/2000/svg")
.node().parentNode.innerHTML;

d3.select("body").append("div")
.attr("id", "download")
.style("top", event.clientY+20+"px")
.style("left", event.clientX+"px")
.html("Right-click on this preview and choose Save as<br />Left-Click to dismiss<br />")
.append("img")
.attr("src", "data:image/svg+xml;base64,"+ btoa(html));

d3.select("#download")
.on("click", function(){
if(event.button == 0){
d3.select(this).transition()
.style("opacity", 0)
.remove();
}
})
.transition()
.duration(500)
.style("opacity", 1);
};

</script>
</body>
